{"version":3,"sources":["components/dashboard/MapControl.js","components/dashboard/constants.js","components/dashboard/MarkerCluster.js","components/dashboard/Map.js","components/dashboard/ActiveUsersMap.js"],"names":["MapControl","onZoomIn","onZoomOut","onReset","position","className","Button","size","color","onClick","title","icon","customMarker","L","Icon","iconUrl","iconSize","iconAnchor","popupAnchor","mcg","markerClusterGroup","chunkedLoading","spiderfyOnMaxZoom","MarkerCluster","markers","map","useLeaflet","useEffect","clearLayers","lat","long","name","street","location","popupContent","marker","LatLng","addTo","bindPopup","addLayer","propTypes","PropTypes","arrayOf","shape","objectOf","number","isRequired","text","string","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","require","shadowUrl","Map","createRef","zoomIn","current","leafletElement","setZoom","getZoom","zoomOut","resetMap","setView","props","center","zoom","tileLayer","provider","this","rest","children","ref","zoomControl","style","height","Component","defaultProps","minZoom","zoomSnap","scrollWheelZoom","ActiveUsersMap","useState","duration","setDuration","Card","CardHeader","UncontrolledDropdown","DropdownToggle","boundary","DropdownMenu","right","DropdownItem","divider","CardBody","CardFooter","Row","Col","xs","CustomInput","type","bsSize","id","value","onChange","target"],"mappings":"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","file":"static/js/14.4cbdb6cc.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button } from 'reactstrap';\nimport Control from 'react-leaflet-control';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nconst MapControl = ({ onZoomIn, onZoomOut, onReset }) => (\n  <Control position=\"topleft\">\n    <div className=\"d-flex flex-column\">\n      <Button size=\"sm\" color=\"falcon-default\" onClick={onZoomIn} title=\"Zoom in\">\n        <FontAwesomeIcon icon=\"plus\" />\n      </Button>\n      <Button size=\"sm\" color=\"falcon-default\" onClick={onReset} title=\"Reset map\" className=\"my-1\">\n        <FontAwesomeIcon icon=\"globe\" />\n      </Button>\n      <Button size=\"sm\" color=\"falcon-default\" onClick={onZoomOut} title=\"Zoom out\">\n        <FontAwesomeIcon icon=\"minus\" />\n      </Button>\n    </div>\n  </Control>\n);\n\nMapControl.propTypes = {\n  onZoomIn: PropTypes.func.isRequired,\n  onZoomOut: PropTypes.func.isRequired,\n  onReset: PropTypes.func.isRequired\n};\n\nexport default MapControl;\n","import L from 'leaflet';\n\nexport const customMarker = new L.Icon({\n  iconUrl: 'https://unpkg.com/leaflet@1.5.1/dist/images/marker-icon.png',\n  iconSize: [25, 41],\n  iconAnchor: [10, 41],\n  popupAnchor: [2, -40]\n});\n","import { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport L from 'leaflet';\nimport 'leaflet.markercluster/dist/leaflet.markercluster';\nimport 'leaflet.markercluster/dist/MarkerCluster.css';\nimport 'leaflet.markercluster/dist/MarkerCluster.Default.css';\nimport { useLeaflet } from 'react-leaflet';\nimport { customMarker } from './constants';\n\nconst mcg = L.markerClusterGroup({\n  chunkedLoading: false,\n  spiderfyOnMaxZoom: false\n});\n\nconst MarkerCluster = ({ markers }) => {\n  const { map } = useLeaflet();\n\n  useEffect(() => {\n    mcg.clearLayers();\n    markers.map(({ lat, long, name, street, location }) => {\n      const popupContent = `\n        <h6 class=\"mb-1\">${name}</h6>\n        <p class=\"m-0 text-500\">${street}, ${location}</p>\n      `;\n      L.marker(new L.LatLng(lat, long), {\n        icon: customMarker\n      })\n        .addTo(mcg)\n        .bindPopup(popupContent);\n    });\n\n    // optionally center the map around the markers\n    // map.fitBounds(mcg.getBounds());\n    // // add the marker cluster group to the map\n    map.addLayer(mcg);\n  }, [markers, map]);\n\n  return null;\n};\n\nMarkerCluster.propTypes = {\n  markers: PropTypes.arrayOf(\n    PropTypes.shape({\n      position: PropTypes.objectOf(PropTypes.number).isRequired,\n      text: PropTypes.string.isRequired\n    }).isRequired\n  ).isRequired\n};\n\nexport default MarkerCluster;\n","import React, { Component, createRef } from 'react';\nimport PropTypes from 'prop-types';\nimport L from 'leaflet';\nimport 'leaflet-providers';\nimport { Map as ReactMap } from 'react-leaflet';\nimport MapControl from './MapControl';\nimport MarkerCluster from './MarkerCluster';\nimport { markers } from '../../data/dashboard/activeUsers';\n\ndelete L.Icon.Default.prototype._getIconUrl;\n\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n  iconUrl: require('leaflet/dist/images/marker-icon.png'),\n  shadowUrl: require('leaflet/dist/images/marker-shadow.png')\n});\n\nclass Map extends Component {\n  map = createRef();\n\n  componentDidMount() {\n    L.tileLayer.provider('CartoDB.Positron').addTo(this.map.current.leafletElement);\n  }\n\n  zoomIn = () => {\n    this.map.current.leafletElement.setZoom(this.map.current.leafletElement.getZoom() + 1);\n  };\n\n  zoomOut = () => {\n    this.map.current.leafletElement.setZoom(this.map.current.leafletElement.getZoom() - 1);\n  };\n\n  resetMap = () => {\n    this.map.current.leafletElement.setView(this.props.center, this.props.zoom);\n  };\n\n  render() {\n    const { children, ...rest } = this.props;\n\n    return (\n      <ReactMap ref={this.map} zoomControl={false} {...rest} style={{ height: 500 }}>\n        <MapControl onZoomIn={this.zoomIn} onZoomOut={this.zoomOut} onReset={this.resetMap} />\n        <MarkerCluster markers={markers} />\n      </ReactMap>\n    );\n  }\n}\n\nMap.propTypes = {\n  center: PropTypes.array,\n  zoom: PropTypes.number,\n  minZoom: PropTypes.number,\n  zoomSnap: PropTypes.number,\n  scrollWheelZoom: PropTypes.bool,\n  className: PropTypes.string,\n  children: PropTypes.node\n};\n\nMap.defaultProps = {\n  center: [10.737, 10],\n  zoom: 1.55,\n  minZoom: 1,\n  zoomSnap: 0.5,\n  scrollWheelZoom: true\n};\n\nexport default Map;\n","import React, { useState } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  Row,\n  Col,\n  Button,\n  Card,\n  CardHeader,\n  CardBody,\n  CardFooter,\n  UncontrolledDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  CustomInput\n} from 'reactstrap';\n\nimport Map from './Map';\nimport 'leaflet/dist/leaflet.css';\n\n// import AppContext from '../../context/Context';\n\nconst ActiveUsersMap = () => {\n  const [duration, setDuration] = useState('week');\n  // const { isDark } = useContext(AppContext);\n\n  return (\n    <Card className=\"h-100 mt-3 mt-lg-0\">\n      <CardHeader className=\"bg-light d-flex justify-content-between\">\n        <h5 className=\"mb-0\">Active users</h5>\n        <UncontrolledDropdown className=\"text-sans-serif\">\n          <DropdownToggle color=\"link\" size=\"sm\" className=\"text-600 dropdown-caret-none\" boundary=\"viewport\">\n            <FontAwesomeIcon icon=\"ellipsis-h\" className=\"fs--1\" />\n          </DropdownToggle>\n          <DropdownMenu className=\"border py-0\" right>\n            <div className=\"bg-white py-2\">\n              <DropdownItem>Edit</DropdownItem>\n              <DropdownItem>Move</DropdownItem>\n              <DropdownItem>Resize</DropdownItem>\n              <DropdownItem divider />\n              <DropdownItem className=\"text-warning\">Archive</DropdownItem>\n              <DropdownItem className=\"text-danger\">Delete</DropdownItem>\n            </div>\n          </DropdownMenu>\n        </UncontrolledDropdown>\n      </CardHeader>\n      <CardBody className=\"p-0 overflow-hidden\">\n        <Map />\n      </CardBody>\n      <CardFooter className=\"bg-light\">\n        <Row className=\"justify-content-between\">\n          <Col xs=\"auto\">\n            <CustomInput\n              type=\"select\"\n              bsSize=\"sm\"\n              id=\"selectDuration\"\n              value={duration}\n              onChange={({ target }) => setDuration(target.value)}\n            >\n              <option value=\"week\">Last 7 days</option>\n              <option value=\"month\">Last month</option>\n              <option value=\"year\">Last year</option>\n            </CustomInput>\n          </Col>\n          <Col xs=\"auto\">\n            <Button color=\"falcon-default\" size=\"sm\">\n              <span className=\"d-none d-sm-inline-block mr-1\">Location</span>Overview\n              <FontAwesomeIcon icon=\"chevron-right\" className=\"ml-1 fs--1\" />\n            </Button>\n          </Col>\n        </Row>\n      </CardFooter>\n    </Card>\n  );\n};\n\nexport default ActiveUsersMap;\n"],"sourceRoot":""}